class FreqStack {

    PriorityQueue<Node> pq;
    Map<Integer,Integer> counter;
    int index;

    public FreqStack() {
        pq = new PriorityQueue<>((x,y)-> x.freq == y.freq ? y.index - x.index : y.freq - x.freq);
        counter = new HashMap<>();
        index = 0;
    }
    
    public void push(int val) {

        int freq = counter.getOrDefault(val,0);
        freq++;
        counter.put(val, freq);      

        pq.add(new Node(val,freq, index++));
    }
    
    public int pop() {
        
        if(pq.isEmpty()) return -1;

        Node n = pq.remove();

        int freq = counter.get(n.val);
        

        if(freq == 1) counter.remove(n.val);
        else  counter.put(n.val, freq--);
        
        return n.val;
    }


    class Node {

        int val;
        int freq;
        int index;

        public Node(int val, int freq, int index){
            this.val = val;
            this.freq = freq;
            this.index = index;
        }
    }
}

/**
 * Your FreqStack object will be instantiated and called as such:
 * FreqStack obj = new FreqStack();
 * obj.push(val);
 * int param_2 = obj.pop();
 */